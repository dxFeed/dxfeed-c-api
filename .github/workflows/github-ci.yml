on:
  push:
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'
      - '[0-9]+\.[0-9]+\.[0-9]+-[a-zA-Z]+'
      - '[a-zA-Z]+-[0-9]+\.[0-9]+\.[0-9]+'

name: Build & Release

env:
  DOCS_ARTIFACT_TEMPLATE: dxfeed-c-api-%VERSION%-docs
  MAC_ARTIFACT_TEMPLATE: dxfeed-c-api-%VERSION%-macosx
  LINUX_ARTIFACT_TEMPLATE: dxfeed-c-api-%VERSION%-linux
  CENTOS_ARTIFACT_TEMPLATE: dxfeed-c-api-%VERSION%-centos
  WINDOWS_ARTIFACT_TEMPLATE: dxfeed-c-api-#VERSION#-windows
  RELEASE_PREFIX: "dxFeed C API "

jobs:

  # --------------------------- BUILD DOCUMENTATION
  build_docs:
    runs-on: ubuntu-latest
    name: build documentation
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${DOCS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Build documentation
        uses: ./.github/actions/doxygen
        id: build-docs
        with:
          artifact: ${{ env.ARTIFACT }}
          release: ${{ env.RELEASE_VERSION }}
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}.zip
          path: artifact/${{ env.ARTIFACT }}.zip


  # --------------------------- BUILD LINUX LIBRARY (WITH TLS SUPPORT)
  build_linux_tls:
    runs-on: ubuntu-latest
    name: build linux (TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${LINUX_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Build Linux library (TLS)
        run: |
          ./make_package.sh ${{ env.RELEASE_VERSION }} no-test
      - name: Post build
        run: |
          ls ./build
          mv build/dxfeed-c-api-${{ env.RELEASE_VERSION }}.zip build/${{ env.ARTIFACT }}.zip
          ls ./build
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}.zip
          path: build/${{ env.ARTIFACT }}.zip


  # --------------------------- BUILD LINUX LIBRARY (WITHOUT TLS SUPPORT)
  build_linux_no_tls:
    runs-on: ubuntu-latest
    name: build linux (no TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${LINUX_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Build Linux library (no TLS)
        run: |
          ./make_package.sh ${{ env.RELEASE_VERSION }} no-test no-tls
      - name: Post build
        run: |
          ls ./build
          mv build/dxfeed-c-api-${{ env.RELEASE_VERSION }}-no-tls.zip build/${{ env.ARTIFACT }}-no-tls.zip
          ls ./build
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}-no-tls.zip
          path: build/${{ env.ARTIFACT }}-no-tls.zip


  # --------------------------- BUILD OLD LINUX (CENTOS 7) LIBRARY (WITH TLS SUPPORT)
  build_centos_tls:
    runs-on: ubuntu-latest
    name: build centos (TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${CENTOS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Build centos library (TLS)
        uses: ./.github/actions/centos
        id: build-centos
        with:
          artifact: ${{ env.ARTIFACT }}
          release: ${{ env.RELEASE_VERSION }}
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}.zip
          path: artifact/${{ env.ARTIFACT }}.zip


  # --------------------------- BUILD OLD LINUX (CENTOS 7) LIBRARY (WITHOUT TLS SUPPORT)
  build_centos_no_tls:
    runs-on: ubuntu-latest
    name: build centos (no TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${CENTOS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Build centos library (no TLS)
        uses: ./.github/actions/centos
        id: build-centos-nt
        with:
          artifact: ${{ env.ARTIFACT }}
          release: ${{ env.RELEASE_VERSION }}
          notls: true
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}-no-tls.zip
          path: artifact/${{ env.ARTIFACT }}-no-tls.zip

  # --------------------------- BUILD MACOSX LIBRARY (WITH TLS SUPPORT)
  build_macos_tls:
    runs-on: macos-latest
    name: build macos (TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${MAC_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Prepare tools
        run: |
          brew install p7zip
      - name: Build MacOSX library (TLS)
        run: |
          ./make_package.sh ${{ env.RELEASE_VERSION }} no-test
      - name: Post build
        run: |
          ls ./build
          mv build/dxfeed-c-api-${{ env.RELEASE_VERSION }}.zip build/${{ env.ARTIFACT }}.zip
          ls ./build
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}.zip
          path: build/${{ env.ARTIFACT }}.zip


  # --------------------------- BUILD MACOSX LIBRARY (WITHOUT TLS SUPPORT)
  build_macos_no_tls:
    runs-on: macos-latest
    name: build macos (no TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo ARTIFACT=$(echo ${MAC_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g" ) >> $GITHUB_ENV
      - name: Check env
        run: |
          echo Artifact: ${{ env.ARTIFACT }}
          echo Release : ${{ env.RELEASE_VERSION }}
      - name: Prepare tools
        run: |
          brew install p7zip
      - name: Build MacOSX library (no TLS)
        run: |
          ./make_package.sh ${{ env.RELEASE_VERSION }} no-test no-tls
      - name: Post build
        run: |
          ls ./build
          mv build/dxfeed-c-api-${{ env.RELEASE_VERSION }}-no-tls.zip build/${{ env.ARTIFACT }}-no-tls.zip
          ls ./build
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}-no-tls.zip
          path: build/${{ env.ARTIFACT }}-no-tls.zip

  # --------------------------- BUILD WINDOWS LIBRARY (WITH TLS SUPPORT)
  build_windows_tls:
    runs-on: windows-2022
    name: build windows (TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$("$Env:GITHUB_REF".Substring(10)) | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
          echo ARTIFACT=$(echo $Env:WINDOWS_ARTIFACT_TEMPLATE | %{$_ -replace '#VERSION#', $("$Env:GITHUB_REF".Substring(10)) }) | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
      - name: Check env
        run: |
          echo "RELEASE    : ${{ env.RELEASE_VERSION }}"
          echo "ARTIFACT   : ${{ env.ARTIFACT }}"
      - name: Build Windows library (TLS)
        run: |
          ./make_package.bat ${{ env.RELEASE_VERSION }} no-test vs2022
      - name: Post build
        run: |
          ls ./build
          mv build/dxfeed-c-api-${{ env.RELEASE_VERSION }}.zip build/${{ env.ARTIFACT }}.zip
          ls ./build
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}.zip
          path: build/${{ env.ARTIFACT }}.zip

  # --------------------------- BUILD WINDOWS LIBRARY (WITH TLS SUPPORT)
  build_windows_no_tls:
    runs-on: windows-2022
    name: build windows (no TLS)
    steps:
      - uses: actions/checkout@master
      - name: Set env
        run: |
          echo RELEASE_VERSION=$("$Env:GITHUB_REF".Substring(10)) | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
          echo ARTIFACT=$(echo $Env:WINDOWS_ARTIFACT_TEMPLATE | %{$_ -replace '#VERSION#', $("$Env:GITHUB_REF".Substring(10)) }) | Add-Content -Path $env:GITHUB_ENV -Encoding utf8
      - name: Check env
        run: |
          echo "RELEASE    : ${{ env.RELEASE_VERSION }}"
          echo "ARTIFACT   : ${{ env.ARTIFACT }}"
      - name: Build Windows library (noTLS)
        run: |
          ./make_package.bat ${{ env.RELEASE_VERSION }} no-test no-tls vs2022
      - name: Post build
        run: |
          ls ./build
          mv build/dxfeed-c-api-${{ env.RELEASE_VERSION }}-no-tls.zip build/${{ env.ARTIFACT }}-no-tls.zip
          ls ./build
      - uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT }}-no-tls.zip
          path: build/${{ env.ARTIFACT }}-no-tls.zip

  # --------------------------- PUBLISH RELEASE
  publish_release:
    runs-on: ubuntu-latest
    name: publish release
    needs: [ build_docs, build_linux_tls, build_linux_no_tls, build_centos_tls, build_centos_no_tls, build_macos_tls, build_macos_no_tls, build_windows_tls, build_windows_no_tls ]
    steps:

      - uses: actions/checkout@master

      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo DOC_ARTIFACT=$(echo ${DOCS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g").zip >> $GITHUB_ENV
          echo LINUX_ARTIFACT=$(echo ${LINUX_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g").zip >> $GITHUB_ENV
          echo LINUX_NO_TLS_ARTIFACT=$(echo ${LINUX_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g")-no-tls.zip >> $GITHUB_ENV
          echo CENTOS_ARTIFACT=$(echo ${CENTOS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g").zip >> $GITHUB_ENV
          echo CENTOS_NO_TLS_ARTIFACT=$(echo ${CENTOS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g")-no-tls.zip >> $GITHUB_ENV
          echo MAC_ARTIFACT=$(echo ${MAC_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g").zip >> $GITHUB_ENV
          echo MAC_NO_TLS_ARTIFACT=$(echo ${MAC_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g")-no-tls.zip >> $GITHUB_ENV
          echo WINDOWS_ARTIFACT=$(echo ${WINDOWS_ARTIFACT_TEMPLATE} | sed "s/#VERSION#/$(echo ${GITHUB_REF:10})/g").zip >> $GITHUB_ENV
          echo WINDOWS_NO_TLS_ARTIFACT=$(echo ${WINDOWS_ARTIFACT_TEMPLATE} | sed "s/#VERSION#/$(echo ${GITHUB_REF:10})/g")-no-tls.zip >> $GITHUB_ENV

      - name: Check env
        run: |
          echo "Release : ${{ env.RELEASE_VERSION }}"
          echo "Documentation Artifact: ${DOC_ARTIFACT}"
          echo "Linux Artifact: ${{ env.LINUX_ARTIFACT }}"
          echo "Linux (no TLS) Artifact: ${{ env.LINUX_NO_TLS_ARTIFACT }}"
          echo "Centos Artifact: ${{ env.CENTOS_ARTIFACT }}"
          echo "Centos (no TLS) Artifact: ${{ env.CENTOS_NO_TLS_ARTIFACT }}"
          echo "Windows Artifact: ${{ env.WINDOWS_ARTIFACT }}"
          echo "Windows (no TLS) Artifact: ${{ env.WINDOWS_NO_TLS_ARTIFACT }}"
          echo "MacOSX Artifact: ${{ env.MAC_ARTIFACT }}"
          echo "MacOSX (no TLS) Artifact: ${{ env.MAC_NO_TLS_ARTIFACT }}"

      - name: Download documentation artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.DOC_ARTIFACT }}
          path: downloads/

      - name: Download linux artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.LINUX_ARTIFACT }}
          path: downloads/

      - name: Download linux-no-tls artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.LINUX_NO_TLS_ARTIFACT }}
          path: downloads/

      - name: Download centos artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.CENTOS_ARTIFACT }}
          path: downloads/

      - name: Download centos-no-tls artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.CENTOS_NO_TLS_ARTIFACT }}
          path: downloads/

      - name: Download macosx artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.MAC_ARTIFACT }}
          path: downloads/

      - name: Download macosx-no-tls artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.MAC_NO_TLS_ARTIFACT }}
          path: downloads/

      - name: Download win artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.WINDOWS_ARTIFACT }}
          path: downloads/

      - name: Download win-no-tls artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.WINDOWS_NO_TLS_ARTIFACT }}
          path: downloads/

      - name: Get release notes
        uses: ./.github/actions/notes
        id: notes
        with:
          file: ReleaseNotes.txt

      - name: Print release notes
        run: |
          echo "=== Release notes ============="
          echo '${{ steps.notes.outputs.data }}'

      - name: Publish release
        uses: ./.github/actions/publish
        with:
          args: downloads/
          draft_regex: '[0-9]+.[0-9]+.[0-9]+-[a-zA-Z]+'
          prerelease_regex: '[a-zA-Z]+-[0-9]+.[0-9]+.[0-9]+'
          notes: '${{ steps.notes.outputs.data }}'
        env:
          RELEASE_PREFIX: ${{ env.RELEASE_PREFIX }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --------------------------- PUBLISH DOCUMENTATION TO AWS S3
  publish_documentation:
    # run this job for "normal" releases only (tag does not contain '-')
    if: ${{ !contains( github.ref, '-' ) }}
    runs-on: ubuntu-latest
    name: publish documentation
    needs: [ publish_release ]
    steps:

      - uses: actions/checkout@master

      - name: Set env
        run: |
          echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
          echo DOC_ARTIFACT=$(echo ${DOCS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g").zip >> $GITHUB_ENV
          echo DOC_DIR=$(echo ${DOCS_ARTIFACT_TEMPLATE} | sed "s/%VERSION%/$(echo ${GITHUB_REF:10})/g") >> $GITHUB_ENV

      - name: Check env
        run: |
          echo "Release : ${{ env.RELEASE_VERSION }}"
          echo "Documentation Artifact: ${DOC_ARTIFACT}"

      - name: Download documentation artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.DOC_ARTIFACT }}
          path: downloads/

      - name: Prepare documentation
        run: |
          cd downloads
          unzip ${{ env.DOC_ARTIFACT }}
          rm ${{ env.DOC_ARTIFACT }}

      - name: Check documentation
        run: |
          cd downloads/${{ env.DOC_DIR }}
          ls -lah

      - name: Upload documentation to S3
        uses: ./.github/actions/s3-upload
        id: upload-docs-to-s3
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_OUTPUT: text
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_S3_PATH: ${{ secrets.AWS_S3_PATH }}
          SOURCE_DIR: ./downloads/${{ env.DOC_DIR }}
